<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>速通CSS3</title>
      <link href="/2022/09/06/%E9%80%9F%E9%80%9ACSS3/"/>
      <url>/2022/09/06/%E9%80%9F%E9%80%9ACSS3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文按照<a href="https://www.runoob.com/css3/css3-tutorial.html">菜鸟教程</a>的思路速览CSS3的特性</p></blockquote><h1 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h1><h2 id="圆角border-radius"><a href="#圆角border-radius" class="headerlink" title="圆角border-radius"></a>圆角border-radius</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">&#123;</span><span class="token property">border</span><span class="token punctuation">:</span>2px solid<span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span>25px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/09/06/%E9%80%9F%E9%80%9ACSS3/image-20220906151142354.png" class="" title="image-20220906151142354"><h2 id="盒阴影box-shadow"><a href="#盒阴影box-shadow" class="headerlink" title="盒阴影box-shadow"></a>盒阴影box-shadow</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span><span class="token property">box-shadow</span><span class="token punctuation">:</span> 10px 10px 5px #888888<span class="token punctuation">;</span><span class="token comment">/*偏移量、偏移量、模糊范围、阴影颜色*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/09/06/%E9%80%9F%E9%80%9ACSS3/image-20220906151239622.png" class="" title="image-20220906151239622"><h2 id="边框图border-image"><a href="#边框图border-image" class="headerlink" title="边框图border-image"></a>边框图border-image</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#round</span><span class="token punctuation">&#123;</span><span class="token property">border-image</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>border.png<span class="token punctuation">)</span></span> 30 30 round<span class="token punctuation">;</span><span class="token comment">/*重复平铺*/</span><span class="token punctuation">&#125;</span><span class="token selector">#stretch</span><span class="token punctuation">&#123;</span><span class="token property">border-image</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>border.png<span class="token punctuation">)</span></span> 30 30 stretch<span class="token punctuation">;</span><span class="token comment">/*拉伸*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/09/06/%E9%80%9F%E9%80%9ACSS3/image-20220906153104887.png" class="" title="image-20220906153104887"><p>如果细化此属性，有下面几个部分：</p><ul><li>border-image-source：定义边框图像的路径；</li><li>border-image-slice：定义边框图像从什么位置开始分割（分割方式比较复杂，不再描述）；</li><li>border-image-width：定义边框图像的厚度（宽度）；</li><li>border-image-repeat：定义边框图像的平铺方式。</li></ul><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="背景图background-image"><a href="#背景图background-image" class="headerlink" title="背景图background-image"></a>背景图background-image</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#example1</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>img_flwr.gif<span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>paper.gif<span class="token punctuation">)</span></span><span class="token punctuation">;</span>    <span class="token property">background-position</span><span class="token punctuation">:</span> right bottom<span class="token punctuation">,</span> left top<span class="token punctuation">;</span>    <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">,</span> repeat<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*上面的css也可以这样写*/</span><span class="token selector">#example1</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>img_flwr.gif<span class="token punctuation">)</span></span> right bottom no-repeat<span class="token punctuation">,</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>paper.gif<span class="token punctuation">)</span></span> left top repeat<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/09/06/%E9%80%9F%E9%80%9ACSS3/image-20220906155256602.png" class="" title="image-20220906155256602"><h2 id="背景大小background-size"><a href="#背景大小background-size" class="headerlink" title="背景大小background-size"></a>背景大小background-size</h2><p>支持接收两个数据：长、宽。</p><p>单位可以使像素、百分比</p><h2 id="background-origin"><a href="#background-origin" class="headerlink" title="background-origin"></a>background-origin</h2><h2 id="background-clip"><a href="#background-clip" class="headerlink" title="background-clip"></a>background-clip</h2><h1 id="渐变效果"><a href="#渐变效果" class="headerlink" title="渐变效果"></a>渐变效果</h1><p>CSS3 定义了两种类型的渐变（gradients）：</p><ul><li><strong>线性渐变（Linear Gradients）- 向下&#x2F;向上&#x2F;向左&#x2F;向右&#x2F;对角方向</strong></li><li><strong>径向渐变（Radial Gradients）- 由它们的中心定义</strong></li></ul><p>菜鸟教程的<a href="https://c.runoob.com/more/gradients/#LemonLime">渐变在线工具</a></p><h2 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h2><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>方向<span class="token punctuation">,</span> 颜色1<span class="token punctuation">,</span> 颜色2<span class="token punctuation">,</span> ...<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#grad</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>#e66465<span class="token punctuation">,</span> #9198e5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*不写方向，默认从上到下*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/2022/09/06/%E9%80%9F%E9%80%9ACSS3/image-20220907085633534.png" class="" title="image-20220907085633534"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#grad</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> red <span class="token punctuation">,</span> yellow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/09/06/%E9%80%9F%E9%80%9ACSS3/image-20220907085729542.png" class="" title="image-20220907085729542"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#grad</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to bottom right<span class="token punctuation">,</span> red<span class="token punctuation">,</span> yellow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*从左上到右下*/</span><span class="token selector">#grad</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>-90deg<span class="token punctuation">,</span> red<span class="token punctuation">,</span> yellow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*延某个角度，0度向上，90度向右*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以使用rgba()的颜色表示方法，来实现透明度变化的效果：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#grad</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*rgba的第四位表示透明度，0微透明，1为不透明*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/2022/09/06/%E9%80%9F%E9%80%9ACSS3/image-20220907090136606.png" class="" title="image-20220907090136606"><p>重复线性变换repeating-linear-gradient</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#grad</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">repeating-linear-gradient</span><span class="token punctuation">(</span>red<span class="token punctuation">,</span> yellow 10%<span class="token punctuation">,</span> green 20%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 这里也使用了百分比来控制颜色的比例 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/2022/09/06/%E9%80%9F%E9%80%9ACSS3/image-20220907090442852.png" class="" title="image-20220907090442852"><h2 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h2><p>如果你比较细心的话，你会发现，本文的最上方就有一处径向渐变，它是一层阴影，形成了暗角，包围住本文的头图。</p><img src="/2022/09/06/%E9%80%9F%E9%80%9ACSS3/image-20220907091209852.png" class="" title="image-20220907091209852"><p>径向渐变语法：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">radial-gradient</span><span class="token punctuation">(</span>形状<span class="token punctuation">,</span> 颜色<span class="token punctuation">,</span> ...<span class="token punctuation">,</span> 颜色<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>形状可以是circle、ellipse（椭圆）。默认值为ellipse</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#grad1</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">radial-gradient</span><span class="token punctuation">(</span>red<span class="token punctuation">,</span> yellow<span class="token punctuation">,</span> green<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 标准的语法（必须放在最后） */</span><span class="token punctuation">&#125;</span><span class="token selector">#grad2</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">radial-gradient</span><span class="token punctuation">(</span>circle<span class="token punctuation">,</span> red<span class="token punctuation">,</span> yellow<span class="token punctuation">,</span> green<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 标准的语法（必须放在最后） */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/09/06/%E9%80%9F%E9%80%9ACSS3/image-20220907091828891.png" class="" title="image-20220907091828891"><p>径向渐变也提供了重复函数repeating-radial-gradient()</p><h1 id="阴影效果"><a href="#阴影效果" class="headerlink" title="阴影效果"></a>阴影效果</h1><h2 id="文本阴影text-shadow"><a href="#文本阴影text-shadow" class="headerlink" title="文本阴影text-shadow"></a>文本阴影text-shadow</h2><p>与和阴影相似</p><h2 id="盒阴影box-shadow-1"><a href="#盒阴影box-shadow-1" class="headerlink" title="盒阴影box-shadow"></a>盒阴影box-shadow</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div.card</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 250px<span class="token punctuation">;</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 4px 8px 0 <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.2<span class="token punctuation">)</span><span class="token punctuation">,</span> 0 6px 20px 0 <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.19<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 这里是添加了两次阴影，来加强效果 */</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">div.header</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #4CAF50<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">div.container</span> <span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/09/06/%E9%80%9F%E9%80%9ACSS3/image-20220907093704018.png" class="" title="image-20220907093704018"><h1 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h1><h2 id="转换属性transform"><a href="#转换属性transform" class="headerlink" title="转换属性transform"></a>转换属性transform</h2><p>transform支持以下函数：</p><ul><li>translate(50px,100px)平移，向右50px，向下100px。（另有rotateY() 、rotateX() ）</li><li>rotate(30deg)    顺时针旋转30度</li><li>scale(2,0.8)    缩放，延x轴变为2倍，延y轴变为0.8倍（另有scaleY() 、scaleX() ）</li><li>skew(10deg,30deg)    倾斜（拉伸成平行四边形）（另有skewY() 、skewX() ）</li><li>matrix()    矩阵变换，一个矩阵变换函数能实现上面大部分效果（比较复杂，不再描述）。matrix接收6个或16个值，实现一些2d或3d的效果</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>30deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2022/09/06/%E9%80%9F%E9%80%9ACSS3/image-20220907100020331.png" class="" title="image-20220907100020331"><h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><p>我们通过@keyframes 来声明一个动画，并在某个元素的animation属性上绑定该动画</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token property">animation</span><span class="token punctuation">:</span>myfirst 5s<span class="token punctuation">;</span><span class="token comment">/* 绑定动画，并指定播放时长 */</span><span class="token punctuation">&#125;</span>@keyframes myfirst<span class="token comment">/* 声明一个名为myfirst的动画 */</span><span class="token punctuation">&#123;</span><span class="token selector">from</span> <span class="token punctuation">&#123;</span><span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">to</span> <span class="token punctuation">&#123;</span><span class="token property">background</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 使用from、to来指定始末态 */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（动画效果不在此处展示）</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token property">animation</span><span class="token punctuation">:</span>myfirst 5s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> myfirst</span><span class="token punctuation">&#123;</span><span class="token comment">/* 使用百分比来指定动画播放到某时间点，达到某状态 */</span><span class="token selector">0%</span>   <span class="token punctuation">&#123;</span><span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span>0px<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span>0px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">25%</span>  <span class="token punctuation">&#123;</span><span class="token property">background</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span>0px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">50%</span>  <span class="token punctuation">&#123;</span><span class="token property">background</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">75%</span>  <span class="token punctuation">&#123;</span><span class="token property">background</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span>0px<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">100%</span> <span class="token punctuation">&#123;</span><span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span>0px<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span>0px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（动画效果不在此处展示）</p><p>其实animation属性还有更多可用值，本文不再描述。<a href="https://www.runoob.com/css3/css3-animations.html">参考网站</a></p><h1 id="多列（分栏）"><a href="#多列（分栏）" class="headerlink" title="多列（分栏）"></a>多列（分栏）</h1><h2 id="列数column-count"><a href="#列数column-count" class="headerlink" title="列数column-count"></a>列数column-count</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.newspaper</span><span class="token punctuation">&#123;</span><span class="token property">column-count</span><span class="token punctuation">:</span>3<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/09/06/%E9%80%9F%E9%80%9ACSS3/image-20220907230812064.png" class="" title="image-20220907230812064"><h2 id="列间隙column-gap"><a href="#列间隙column-gap" class="headerlink" title="列间隙column-gap"></a>列间隙column-gap</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.newspaper</span><span class="token punctuation">&#123;</span><span class="token property">column-count</span><span class="token punctuation">:</span>3<span class="token punctuation">;</span><span class="token property">column-gap</span><span class="token punctuation">:</span>120px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/09/06/%E9%80%9F%E9%80%9ACSS3/image-20220907230858969.png" class="" title="image-20220907230858969"><h2 id="列分割线column-rule"><a href="#列分割线column-rule" class="headerlink" title="列分割线column-rule"></a>列分割线column-rule</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.newspaper</span><span class="token punctuation">&#123;</span><span class="token property">column-count</span><span class="token punctuation">:</span>3<span class="token punctuation">;</span><span class="token property">column-rule</span><span class="token punctuation">:</span>4px outset #ff00ff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/09/06/%E9%80%9F%E9%80%9ACSS3/image-20220907230950236.png" class="" title="image-20220907230950236"><h2 id="跨列能力column-span"><a href="#跨列能力column-span" class="headerlink" title="跨列能力column-span"></a>跨列能力column-span</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">&#123;</span><span class="token property">column-count</span><span class="token punctuation">:</span>3<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h2</span><span class="token punctuation">&#123;</span><span class="token property">column-span</span><span class="token punctuation">:</span>all<span class="token punctuation">;</span><span class="token comment">/* h2是div的子元素 */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/09/06/%E9%80%9F%E9%80%9ACSS3/image-20220907231043475.png" class="" title="image-20220907231043475"><h2 id="列宽-column-width"><a href="#列宽-column-width" class="headerlink" title="列宽 column-width"></a>列宽 column-width</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.newspaper</span><span class="token punctuation">&#123;</span><span class="token property">column-width</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span><span class="token comment">/* 可以脱离column-count，直接生成分栏效果 */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/09/06/%E9%80%9F%E9%80%9ACSS3/image-20220907231155890.png" class="" title="image-20220907231155890"><h1 id="用户界面"><a href="#用户界面" class="headerlink" title="用户界面"></a>用户界面</h1><h2 id="自定义尺寸resize"><a href="#自定义尺寸resize" class="headerlink" title="自定义尺寸resize"></a>自定义尺寸resize</h2><p>resize可选值有：both、horizontal、vertical，分别是自由变动大小、只能自由变动宽度、只能自由变动高度</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">&#123;</span><span class="token property">border</span><span class="token punctuation">:</span>2px solid<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span><span class="token property">resize</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span><span class="token comment">/* resize需要和overflow搭配！！！ */</span><span class="token property">overflow</span><span class="token punctuation">:</span>auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方框尺寸box-sizing"><a href="#方框尺寸box-sizing" class="headerlink" title="方框尺寸box-sizing"></a>方框尺寸box-sizing</h2><p>此属性定义该元素尺寸的计算方式：（默认值为content-box）</p><p>content-box：假设你指定width为100px，那么这个盒子的大小&#x3D;100+边框+内边距</p><p>border-box：假设你指定width为100px，那么这个盒子的大小&#x3D;100-边框-内边距</p><p>inherit：从父元素继承box-sizing属性</p><h2 id="外轮廓outline"><a href="#外轮廓outline" class="headerlink" title="外轮廓outline"></a>外轮廓outline</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span>150px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span>70px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span>2px solid black<span class="token punctuation">;</span><span class="token property">outline</span><span class="token punctuation">:</span>2px solid red<span class="token punctuation">;</span><span class="token comment">/* 指定外轮廓的样式 */</span><span class="token property">outline-offset</span><span class="token punctuation">:</span>15px<span class="token punctuation">;</span><span class="token comment">/* 指定外轮廓离border的距离 */</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="弹性盒子重点！！！"><a href="#弹性盒子重点！！！" class="headerlink" title="弹性盒子重点！！！"></a><u>弹性盒子重点！！！</u></h1><h1 id="媒体监测-media"><a href="#媒体监测-media" class="headerlink" title="媒体监测@media"></a>媒体监测@media</h1><h1 id="CSS补充"><a href="#CSS补充" class="headerlink" title="CSS补充"></a>CSS补充</h1><h2 id="display"><a href="#display" class="headerlink" title="display"></a>display</h2><h3 id="隐藏元素"><a href="#隐藏元素" class="headerlink" title="隐藏元素"></a>隐藏元素</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1</span><span class="token punctuation">&#123;</span><span class="token property">visibility</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*只是隐藏内容，仍然占据空间*/</span><span class="token selector">h1</span><span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="块元素、内联元素"><a href="#块元素、内联元素" class="headerlink" title="块元素、内联元素"></a>块元素、内联元素</h3><p>块元素，占用了全部宽度，在前后都是换行符。</p><p>块元素的例子：</p><blockquote><ul><li>h1</li><li>p</li><li>div</li></ul></blockquote><p>内联元素只需要必要的宽度，不强制换行。</p><p>内联元素的例子：</p><blockquote><ul><li>span</li><li>a</li></ul></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">li</span><span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span>inline<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 将li强制转换为内联元素 */</span><span class="token selector">span</span> <span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 将span强制转换为块状元素 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="position"><a href="#position" class="headerlink" title="position"></a>position</h2><p>position 属性的五个值：</p><ul><li>static静态定位</li><li>relative    相对定位（相对于正常的兄弟元素）</li><li>fixed    固定定位（相对于浏览器窗口是固定的）</li><li>absolute    绝对定位（相对于已定位的父元素，如果没有，则相对于<html>）absolute定位的元素不占据空间，可能和其他元素重叠</li><li>sticky    粘性定位（当改元素因页面滚动离开可视区时，它会固定在可视区的边缘）比如</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div.static</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> static<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 3px solid #73AD21<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/09/06/%E9%80%9F%E9%80%9ACSS3/image-20220908193610549.png" class="" title="image-20220908193610549"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h2.pos_left</span><span class="token punctuation">&#123;</span><span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span><span class="token comment">/* 相对于那些正常位置的元素，左移20px */</span><span class="token property">left</span><span class="token punctuation">:</span>-20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h2.pos_right</span><span class="token punctuation">&#123;</span><span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span><span class="token comment">/* 相对于那些正常位置的元素，右移20px */</span><span class="token property">left</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/09/06/%E9%80%9F%E9%80%9ACSS3/image-20220908194012692.png" class="" title="image-20220908194012692"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p.pos_fixed</span><span class="token punctuation">&#123;</span><span class="token property">position</span><span class="token punctuation">:</span>fixed<span class="token punctuation">;</span><span class="token comment">/* 相对于浏览器窗口是固定位置 */</span><span class="token property">top</span><span class="token punctuation">:</span>30px<span class="token punctuation">;</span><span class="token property">right</span><span class="token punctuation">:</span>5px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/09/06/%E9%80%9F%E9%80%9ACSS3/image-20220908193741254.png" class="" title="image-20220908193741254"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h2</span><span class="token punctuation">&#123;</span><span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span>12px<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span>0px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/09/06/%E9%80%9F%E9%80%9ACSS3/image-20220908200600230.png" class="" title="image-20220908200600230"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div.sticky</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> sticky<span class="token punctuation">;</span><span class="token punctuation">&#123;</span><span class="token comment">/* 粘性定位 */</span>  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 2px solid #4CAF50<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/09/06/%E9%80%9F%E9%80%9ACSS3/image-20220908201226623.png" class="" title="image-20220908201226623"><h2 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h2><p>对于一些尺寸固定的元素，其内部的文本可能很多，导致“内容溢出”，此时，就要使用overflow:scroll（不管是否溢出，都添加水平、竖直滚动条）或overflow:auto（浏览器酌情添加滚动条），来添加滚动条。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 1px dotted black<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/09/06/%E9%80%9F%E9%80%9ACSS3/image-20220908201821749.png" class="" title="image-20220908201821749"><h2 id="float"><a href="#float" class="headerlink" title="float"></a>float</h2><h3 id="元素浮动"><a href="#元素浮动" class="headerlink" title="元素浮动"></a>元素浮动</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">img</span> <span class="token punctuation">&#123;</span><span class="token property">float</span><span class="token punctuation">:</span>right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2022/09/06/%E9%80%9F%E9%80%9ACSS3/image-20220908202337083.png" class="" title="image-20220908202337083"><h3 id="多个相邻元素的浮动"><a href="#多个相邻元素的浮动" class="headerlink" title="多个相邻元素的浮动"></a>多个相邻元素的浮动</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.thumbnail</span> <span class="token punctuation">&#123;</span><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span><span class="token comment">/* 多个元素都浮动时，会形成自动换行的效果 */</span><span class="token property">width</span><span class="token punctuation">:</span>110px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>90px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span>5px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/09/06/%E9%80%9F%E9%80%9ACSS3/image-20220908202518993.png" class="" title="image-20220908202518993"><h3 id="清除某元素的浮动"><a href="#清除某元素的浮动" class="headerlink" title="清除某元素的浮动"></a>清除某元素的浮动</h3><p>如果不清除图片之间一段文字的浮动，会出现下面的问题：</p><img src="/2022/09/06/%E9%80%9F%E9%80%9ACSS3/image-20220908202628137.png" class="" title="image-20220908202628137"><p>如果用clear属性除去浮动，则会正常：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.text_line</span><span class="token punctuation">&#123;</span><span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2022/09/06/%E9%80%9F%E9%80%9ACSS3/image-20220908202803048.png" class="" title="image-20220908202803048"><h1 id="一些CSS技巧"><a href="#一些CSS技巧" class="headerlink" title="一些CSS技巧"></a>一些CSS技巧</h1><h2 id="网格布局技巧"><a href="#网格布局技巧" class="headerlink" title="网格布局技巧"></a>网格布局技巧</h2><h2 id="图片技巧"><a href="#图片技巧" class="headerlink" title="图片技巧"></a>图片技巧</h2><h2 id="按钮技巧"><a href="#按钮技巧" class="headerlink" title="按钮技巧"></a>按钮技巧</h2><h2 id="翻页按钮技巧"><a href="#翻页按钮技巧" class="headerlink" title="翻页按钮技巧"></a>翻页按钮技巧</h2><h1 id="又一些技巧"><a href="#又一些技巧" class="headerlink" title="又一些技巧"></a>又一些技巧</h1><h2 id="居中技巧"><a href="#居中技巧" class="headerlink" title="居中技巧"></a>居中技巧</h2><h2 id="下拉菜单技巧"><a href="#下拉菜单技巧" class="headerlink" title="下拉菜单技巧"></a>下拉菜单技巧</h2><h2 id="悬浮提示技巧"><a href="#悬浮提示技巧" class="headerlink" title="悬浮提示技巧"></a>悬浮提示技巧</h2><h2 id="网页布局技巧"><a href="#网页布局技巧" class="headerlink" title="网页布局技巧"></a>网页布局技巧</h2>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++复习</title>
      <link href="/2022/09/05/C++%E5%A4%8D%E4%B9%A0/"/>
      <url>/2022/09/05/C++%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文参考《数据结构、算法与应用  C++语言描述  原书第2版》第一章中复习c++的思路</p></blockquote><h1 id="函数与参数"><a href="#函数与参数" class="headerlink" title="函数与参数"></a>函数与参数</h1><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><h3 id="值传递Value-Parameters"><a href="#值传递Value-Parameters" class="headerlink" title="值传递Value Parameters"></a>值传递Value Parameters</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int calculate(int a,int b,int c)&#123;return a+b+b*c+4;&#125;int m&#x3D;20, x&#x3D;10, y&#x3D;15,z;z &#x3D; calculate(m,x,y);&#x2F;&#x2F;这个过程会将把局部变量abc复制构造成mxy，方法结束后再析构&#x2F;&#x2F;效率低（比如大型矩阵传值）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="引用传递Reference-Parameters"><a href="#引用传递Reference-Parameters" class="headerlink" title="引用传递Reference Parameters"></a>引用传递Reference Parameters</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int calculate(int &amp;a,int &amp;b,int &amp;c)&#123;return a+b+b*c+4;&#125;int m&#x3D;20, x&#x3D;10, y&#x3D;15,z;z &#x3D; calculate(m,x,y);&#x2F;&#x2F;这个过程会将把abc指向mxy的地址，比较快&#x2F;&#x2F;对于int、float这种简单的基本数据类型，其实可以直接使用值传递；而其他数据类型比较复杂，应该用引用传递<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常量引用传递Const-Reference-Parameters"><a href="#常量引用传递Const-Reference-Parameters" class="headerlink" title="常量引用传递Const Reference Parameters"></a>常量引用传递Const Reference Parameters</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt;class Ta, class Tb , class Tc&gt;Ta abc(const Ta&amp; a, const Tb&amp; b, const Tc&amp; c)&#123;return a+b*c;&#125; &#x2F;&#x2F;当函数不会修改实际参数值(只读)的时候可以采用常量引用参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数返回方式"><a href="#函数返回方式" class="headerlink" title="函数返回方式"></a>函数返回方式</h2><h3 id="值返回Return-Value"><a href="#值返回Return-Value" class="headerlink" title="值返回Return Value"></a>值返回Return Value</h3><p>​直接复制一份被返回的东西</p><h3 id="引用返回Return-Reference"><a href="#引用返回Return-Reference" class="headerlink" title="引用返回Return Reference"></a>引用返回Return Reference</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">T&amp; X(int i, T&amp; a)&#123;……Return a; &#125;&#x2F;&#x2F;只返回一个引用，不会把该引用对应的值复制到返回环境中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​只返回一个引用，不会把该引用对应的值复制到环境中</p><h3 id="常量引用返回Return-Const-Reference"><a href="#常量引用返回Return-Const-Reference" class="headerlink" title="常量引用返回Return Const Reference"></a>常量引用返回Return Const Reference</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Const T&amp; X(int i,T&amp; z)&#x2F;&#x2F;返回的结果是一个不变化的对象（？？？没看明明白）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="重载函数"><a href="#重载函数" class="headerlink" title="重载函数"></a>重载函数</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int abc(int a, int b, int c)&#123;return a+b*c;&#125;&#x2F;&#x2F;重载abcfloat abc(float a, float b, float c)&#123;return a+b*c;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int abc(int a, int b, int c)&#123;if(a&lt;&#x3D;0 || b&lt;&#x3D;0 || c&lt;&#x3D;0 )throw “All parameters should be &gt;0” ; &#x2F;&#x2F;抛出了一个类型为char*的异常return a+b*c;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="捕获处理异常"><a href="#捕获处理异常" class="headerlink" title="捕获处理异常"></a>捕获处理异常</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main()&#123;try (cout&lt;&lt;abc(2,0,4)&lt;&lt;endl; )catch (char* e)&#x2F;&#x2F;当捕捉到char*类型异常时，执行下面的语句：&#123;cout&lt;&lt; “The parameters to abc were 2,0,4 ”&lt;&lt;endl;cout&lt;&lt; “An exception has been thrown”&lt;&lt;endl; cout&lt;&lt; e &lt;&lt;endl; &#x2F;&#x2F;这里把该异常直接cout出来了return 1;&#125;return 0;&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="动态存储空间"><a href="#动态存储空间" class="headerlink" title="动态存储空间"></a>动态存储空间</h1><blockquote><p> C&#x2F;C++定义了4个内存区间：</p><ol><li><p><strong>代码区</strong> </p></li><li><p><strong>全局变量与静态变量区</strong> </p></li><li><p><strong>局部变量区(栈区)</strong>  </p></li><li><p>**动态存储区，即堆(heap)区或自由存储区(free  store) **</p></li></ol></blockquote><blockquote><p>一般定义变量（或对象）时，编译器是知道它的大小的，可以直接分配内存；这种方式称为<strong>静态存储分配</strong>。</p><p>而有些对象只有运行时才知道大小，编译时就无法指定存储空间，这时要采用<strong>动态存储分配</strong>（此时记得要释放内存）。动态存储分配都在<strong>堆区（动态存储区）</strong>进行。</p></blockquote><h2 id="操作符new-可用来进行动态存储分配："><a href="#操作符new-可用来进行动态存储分配：" class="headerlink" title="操作符new 可用来进行动态存储分配："></a>操作符new 可用来进行动态存储分配：</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int *y ;&#x2F;&#x2F;定义一个int类型指针y&#x3D;new int;&#x2F;&#x2F;让它 &#x3D; 一个指向int大小的动态空间的指针*y &#x3D; 10; &#x2F;&#x2F;赋值操作&#x2F;&#x2F;也可以采取以下写法int *y &#x3D; new int;*y &#x3D; 10;int *y &#x3D; new int (10);int *y;y &#x3D; new int (10);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">cin &gt;&gt; n;float *x &#x3D; new float[n];&#x2F;&#x2F;如果数组的大小在编译时是未知的，必须进行动态存储分配。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;创建动态的二维数组(看的有点晕了)template &lt;class T&gt;bool make2dArray (T** &amp;x, int Rows, int columns)&#123;try &#123;x &#x3D; new T* [Rows]; &#x2F;&#x2F;x是一个数组的指针，这个数组里也全是指针for (int i &#x3D; 0 ; i &lt; Rows; i++)x[i] &#x3D; new T [columns]; &#x2F;&#x2F;每一个“行”都是一个动态数组return true;&#125;catch (bad_alloc) &#123;return false;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">float *x;try &#123;x &#x3D; new float [n];&#125;catch (bad_alloc) &#123; &#x2F;&#x2F;内存不足 bad_alloccerr &lt;&lt; &quot;Out of Memory&quot; &lt;&lt; endl;exit (1) ; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;二维数组，在编译时数组的行数未知:char (*c)[5];&#x2F;&#x2F;（这个写法要记好）try &#123; c &#x3D; new char [n][5];&#125;catch (bad_alloc) &#123;cerr &lt;&lt; &quot;Out of Memory&quot; &lt;&lt; endl;exit (1);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="操作符-delete-释放由操作符new所分配的空间"><a href="#操作符-delete-释放由操作符new所分配的空间" class="headerlink" title="操作符 delete    释放由操作符new所分配的空间"></a>操作符 delete    释放由操作符new所分配的空间</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int *y &#x3D; new int (10);Delete y;float *x&#x3D;new float[n];Delete []x;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;释放动态的二维数组template &lt;class T&gt;void delete2dArray( T** &amp;x, int Rows)&#x2F;&#x2F;这里只需要传入行数就行，因为删除某行的时候，不需要知道它的列数&#123;for (int i &#x3D; 0 ; i &lt; Rows ; i++)delete [] x[i]; &#x2F;&#x2F;删除每个x[i],即删除每个行delete [] x; &#x2F;&#x2F;最后才删除xx &#x3D; NULL;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="自有数据类型"><a href="#自有数据类型" class="headerlink" title="自有数据类型"></a>自有数据类型</h1><p>下面以货币类currency为例（有点长，耐心记下来）：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;先枚举出来正负号的表达方式enum signType &#123;plus, minus&#125;;&#x2F;&#x2F;声明货币类，和其中的几个方法class currency &#123;public:&#x2F;&#x2F;构造函数currency(signType theSign &#x3D; plus, unsigned long theDollars &#x3D; 0, unsigned int theCents &#x3D; 0); &#x2F;&#x2F;只声明，未实现&#x2F;&#x2F;析构函数~currency() &#123;&#125;    bool setValue(signType, unsigned long, unsigned int);&#x2F;&#x2F;只声明，未实现bool setValue(double);&#x2F;&#x2F;只声明，未实现        &#x2F;&#x2F;三个getter函数signType getSign() const &#123;return sign;&#125;unsigned long getDollars() const &#123;return dollars;&#125;unsigned int getCents() const &#123;return cents;&#125;        &#x2F;&#x2F;下面三个是常量函数（不改变调用对象的值）currency add(const currency&amp;) const;currency&amp; increment(const currency&amp;);void output() const;    private:signType sign; &#x2F;&#x2F;符号（资金的正负）unsigned long dollars; &#x2F;&#x2F;美元的数量unsigned int cents; &#x2F;&#x2F;美分的数量&#125;&#x2F;&#x2F;构造函数的实现 currency::currency(signType theSign, unsigned long theDollars, unsigned int theCents)&#123;if (theCents &gt; 99) &#x2F;&#x2F;美分太多，抛出异常throw illegalParameterValue(&quot;Cents should be &lt; 100&quot; );sign &#x3D; theSign; dollars &#x3D; theDollars; cents &#x3D; theCents;&#125;&#x2F;&#x2F;两个修改货币数setValue函数的实现bool currency::setValue((signType theSign, unsigned long theDollars, unsigned int theCents))&#123;if (theCents &gt; 99) &#x2F;&#x2F;美分太多，抛出异常throw illegalParameterValue(&quot;Cents should be &lt; 100&quot; );sign &#x3D; theSign; dollars &#x3D; theDollars; cents &#x3D; theCents; return true;&#125;bool currency::setValue(double theAmount)&#123;&#x2F;&#x2F;给调用对象的数据成员赋值if (theAmount &lt; 0) &#123;sign &#x3D; minus; theAmount &#x3D; -theAmount;&#125;else sign &#x3D; plus;dollars &#x3D; (unsigned long) theAmount; &#x2F;&#x2F;提取整数部分cents &#x3D; (unsigned int) ((theAmount+0.001-dollars)*100); &#x2F;&#x2F;提取两个小数位return true;&#125;&#x2F;&#x2F;合计add函数的实现（方法头上有const，是常量函数，不会改变调用者，而是返回一个新的currency对象）currency currency::add(const currency&amp; x) const&#123;&#x2F;&#x2F;把x和 *this相加.long a1, a2, a3;currency result;&#x2F;&#x2F;把调用对象转换成符号整数a1 &#x3D; dollars * 100 + cents; if (sign &#x3D; &#x3D; minus) a1 &#x3D; -a1;&#x2F;&#x2F;把x转换成符号整数a2 &#x3D; x.dollars * 100 + x.cents; if (x.sign &#x3D; &#x3D; minus) a2 &#x3D; -a2 ;a3 &#x3D; a1 + a2;&#x2F;&#x2F;转换为currency 对象的表达形式if (a3 &lt; 0) &#123;result.sign &#x3D; minus; a3 &#x3D; -a3 ; &#125;else result.sign &#x3D; plus;&#x2F;&#x2F;这里可以用.直接访问currency的private字段，因为add是currency类的函数result.dollars &#x3D; a3&#x2F;100;result.cents &#x3D; a3 - result.dollars * 100;return result;&#125;&#x2F;&#x2F;资金增加increment函数的实现（调用者的值增加了）currency&amp; currency::increment(const currency&amp; x)&#123;*this &#x3D; add(x);return *this;&#125;&#x2F;&#x2F;打印资金output函数的实现void currency::output ( ) const&#123;&#x2F;&#x2F;输出调用对象的值if (sign &#x3D; &#x3D; minus) cout &lt;&lt; &#39;-&#39;;cout &lt;&lt; &#39;$&#39; &lt;&lt; dollars &lt;&lt; &#39;.&#39;;if (cents &lt; 10) cout &lt;&lt; &quot;0&quot;;cout &lt;&lt; cents;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设上文的代码都在currency.h中</p><p>下面开始使用currency类：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &quot;currency.h &quot;using namespace std;int main ()&#123;currency g, h(plus, 3, 50), i, j;&#x2F;&#x2F;使用两种形式的setValue来赋值g.setValue(minus, 2, 25);i.setValue ( - 6. 45 ) ;&#x2F;&#x2F;调用add和outputj &#x3D; h.add(g);h.output( ); cout &lt;&lt; &quot; + &quot;;g.output( );cout &lt;&lt; &quot; &#x3D; &quot;;j.output( ); cout &lt;&lt; endl;&#x2F;&#x2F;连续调用两次函数addj &#x3D; i.add(g).add(h);……&#x2F;&#x2F;省略输出语句&#x2F;&#x2F;调用函数increment和addj &#x3D; i. increment(g).add(h);……&#x2F;&#x2F;省略输出语句        &#x2F;&#x2F;测试异常cout&lt;&lt; &quot; Attempting to inatialize with cents &#x3D;152&quot; &lt;&lt; endl;try &#123;i.setValue(plus, 3, 152); &#125;catch (illegalParameterValue e)&#123;cout&lt;&lt; “Caught thrown exception&quot; &lt;&lt; endl;e.outputMessage();&#125; return 0; &#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="操作符重载"><a href="#操作符重载" class="headerlink" title="操作符重载"></a>操作符重载</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class currency &#123;public :&#x2F;&#x2F;构造函数currency(signType theSign &#x3D; plus, unsigned long theDollars &#x3D; 0, unsigned int theCents &#x3D; 0); currency operator+(const currency&amp; ) const;currency&amp; operator+&#x3D;(const currency&amp; x)&#123;amount +&#x3D; x.amount; return *this;&#125;void output(ostream&amp; out) const;Private:long amount;&#125; ;&#x2F;&#x2F;重载加号+currency currency::operator+(const currency&amp; x) const&#123;&#x2F;&#x2F;把参数对象x 和调用对象 *this相加.currency result;result.amount &#x3D; amount + x.amount;return result;&#125;void currency::output(ostream&amp; out) const&#123;&#x2F;&#x2F;将货币值插入到输出流 .long theAmount &#x3D; amount;if (theAmount &lt; 0) &#123;out &lt;&lt; &#39;-&#39; ; theAmount &#x3D; -theAmount ; &#125;long dollars &#x3D; theAmount &#x2F; 100; &#x2F;&#x2F; dollarsout &lt;&lt; &#39;$&#39; &lt;&lt; dollars &lt;&lt; &#39;.&#39; ;int cents &#x3D; theAmount - dollars * 100; &#x2F;&#x2F; centsif (cents &lt; 10) out &lt;&lt; &quot;0&quot;;out &lt;&lt; cents;&#125;&#x2F;&#x2F;重载 &lt;&lt;ostream&amp; operator&lt;&lt;(ostream&amp; out, const currency&amp; x)&#123;    x.output(out);     return out;&#125;&#x2F;&#x2F;使用重载后的操作符j &#x3D; h+g;cout &lt;&lt; h &lt;&lt; &quot; + &quot; &lt;&lt; g &lt;&lt; &quot; &#x3D; &quot; &lt;&lt; j &lt;&lt; endl; j &#x3D; i+g+h;cout &lt;&lt; i &lt;&lt; &quot; + &quot; &lt;&lt; g &lt;&lt; &quot; + &quot; &lt;&lt; h &lt;&lt; &quot; &#x3D; &quot; &lt;&lt; j &lt;&lt; endl;j &#x3D; (i+&#x3D;g)+h;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="友元和保护性类成员"><a href="#友元和保护性类成员" class="headerlink" title="友元和保护性类成员"></a>友元和保护性类成员</h2><blockquote><p>友元函数：</p><p>在友元函数内部，可以访问该类对象的私有成员。</p><p>友元类：</p><p>一个类 A 可以将另一个类 B 声明为自己的友元，类 B 的所有成员函数就都可以访问类 A 对象的私有成员</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;把ostream&amp; operator&lt;&lt;描述为currency类的友元class currency &#123;friend ostream&amp; operator &lt;&lt;(ostream&amp;, const currency&amp;);Public:………&#125;&#x2F;&#x2F;然后重载 &lt;&lt;运算符，就不用再ostream&amp; operator&lt;&lt;(ostream&amp; out, const currency&amp; x)&#123;&#x2F;&#x2F;把货币值插入到输出流long theAmount &#x3D; x.amount;if (theAmount &lt; 0) &#123;out &lt;&lt; &#39;-&#39; ; theAmount &#x3D; -theAmount;&#125;long dollars &#x3D; theAmount &#x2F; 100; &#x2F;&#x2F;dollarsout &lt;&lt; &#39;$&#39; &lt;&lt; dollars &lt;&lt; &#39;.&#39; ;int cents &#x3D; theAmount - dollars * 100; &#x2F;&#x2F; centsif (cents &lt; 10) out &lt;&lt; &quot;0&quot;;out &lt;&lt; cents;return out;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>派生类可以访问保护性类成员 </p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;保护性类成员class currency &#123;friend ostream&amp; operator &lt;&lt;(ostream&amp;, const currency&amp;);Public:…Protected:…&#x2F;&#x2F;这里就是保护性类成员Private:…&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="异常类illegalParameterValue"><a href="#异常类illegalParameterValue" class="headerlink" title="异常类illegalParameterValue"></a>异常类illegalParameterValue</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class illegalParameterValue&#123;public:illegalParameterValue():message(“Illegal Parameter Value“)&#123;&#125;&#x2F;&#x2F;无参构造函数（冒号后面是初始化）illegalParameterValue(char* theMessage)&#123;message&#x3D; theMessage;&#125; &#x2F;&#x2F;含参构造函数void outputmessage() &#123;cout&lt;&lt;message&lt;&lt;endl;&#125;&#x2F;&#x2F;一个普通的输出函数private:string message;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h1><blockquote><p>递归函数：递归函数是一个自己调用自己的函数。</p></blockquote><blockquote><p>一个正确的递归函数必须包含： </p><p>​➢一个基本部分（递归的出口）</p><p>​➢递归调用部分</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;用递归实现的阶乘函数int f(int n)&#123; if (n&lt;&#x3D;1) return 1; &#x2F;&#x2F;递归出口else return n*f(n-1);&#x2F;&#x2F;调用自身&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>递归优点： 递归简洁、易编写、易懂 易证明正确性 </p><p>递归缺点： 递归效率低 重复计算多</p></blockquote><blockquote><p>递归函数改为非递归： </p><p>​改为非递归的目的是提高效率 </p><p>​<strong>单向递归</strong>可直接用<strong>迭代</strong>实现非递归</p><p> ​其他情形必须借助<strong>栈</strong>实现非递归</p></blockquote><h1 id="标准模板库STL"><a href="#标准模板库STL" class="headerlink" title="标准模板库STL"></a>标准模板库STL</h1><blockquote><p>C++标准模板库(STL)是一个<strong>容器</strong>、<strong>适配器</strong>、<strong>迭代器</strong> 、<strong>函数对象</strong>和<strong>算法</strong>的集合，使用STL，应用程序的 设计会简单很多。 </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022学线暑假实训：山大迷踪图片服务</title>
      <link href="/2022/07/25/2022%E5%AD%A6%E7%BA%BF%E6%9A%91%E5%81%87%E5%AE%9E%E8%AE%AD%EF%BC%9A%E5%B1%B1%E5%A4%A7%E8%BF%B7%E8%B8%AA%E5%9B%BE%E7%89%87%E6%9C%8D%E5%8A%A1/"/>
      <url>/2022/07/25/2022%E5%AD%A6%E7%BA%BF%E6%9A%91%E5%81%87%E5%AE%9E%E8%AE%AD%EF%BC%9A%E5%B1%B1%E5%A4%A7%E8%BF%B7%E8%B8%AA%E5%9B%BE%E7%89%87%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录第一次做图片服务后端</p><p>后端架构为：SpringBoot + Jpa + MySQL + JWT</p><p>本文同步在我的博客<a href="https://xzx.vercel.app/">SPIN 自旋</a></p></blockquote><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>山大迷踪中关于图片的需求有：用户头像、发布迷踪帖(含照片)、发布匹配帖(含照片)、积分商城初始化(商品图片)。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>分析之后得出，后端应实现如下功能：</p><blockquote><ol><li><p>上传图片</p></li><li><p>保存图片</p></li><li><p>图片回传</p></li><li><p>删除废弃的头像、未过审帖子的照片、匹配成功后两帖子的照片</p></li></ol></blockquote><h1 id="代码实现（以用户头像为例）"><a href="#代码实现（以用户头像为例）" class="headerlink" title="代码实现（以用户头像为例）"></a>代码实现（以用户头像为例）</h1><h2 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h2><p>采用formdata格式，直接上传图片文件，在后端使用MultipartFile类来接收。</p><p>Controller代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/changeavatar"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">changeAvatar</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> avatar<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从请求头中拿到token</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUserByToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过token来拿到用户实体</span>    userService<span class="token punctuation">.</span><span class="token function">changeAvatar</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>avatar<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 修改该用户的头像</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">JwtUtil</span><span class="token punctuation">.</span><span class="token function">refreshToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回成功码和新的token</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，UserService.changeAvatar方法的实现如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeAvatar</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">,</span> <span class="token class-name">MultipartFile</span> avatar<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> avatarPath <span class="token operator">=</span> <span class="token class-name">ImgUtil</span><span class="token punctuation">.</span><span class="token function">uploadAvatar</span><span class="token punctuation">(</span>avatar<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//保存图片到服务器，后面会贴出这个方法的代码</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>avatarPath<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>user<span class="token punctuation">.</span><span class="token function">getAvatar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token class-name">ImgUtil</span><span class="token punctuation">.</span><span class="token function">deleteImg</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getAvatar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存在旧头像则删除</span>    user<span class="token punctuation">.</span><span class="token function">setAvatar</span><span class="token punctuation">(</span>avatarPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//保存用户头像url</span>    <span class="token function">modifyUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新用户</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="保存图片到服务器"><a href="#保存图片到服务器" class="headerlink" title="保存图片到服务器"></a>保存图片到服务器</h2><p>上面我们已经拿到了图片的MutipartFile对象，现在我们把这个对象写成文件，保存在服务器的本地目录下。</p><p>这个过程，就是上文中说到的ImgUtil.uploadAvatar方法，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">misstrace<span class="token punctuation">.</span></span><span class="token class-name">Util</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">net<span class="token punctuation">.</span>coobird<span class="token punctuation">.</span>thumbnailator<span class="token punctuation">.</span></span><span class="token class-name">Thumbnails</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span></span><span class="token class-name">MultipartFile</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">UUID</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImgUtil</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//    定义头像存储地址 </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> AVATAR_PATH <span class="token operator">=</span> <span class="token string">"/project/misstrace/tomcat8port8080/webapps/avatar/"</span><span class="token punctuation">;</span>    <span class="token comment">//    定义访问头像的路径根部 http</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> AVATAR_LOAD_PATH <span class="token operator">=</span> <span class="token string">"http://xxx.xxx.xxx/misstrace/avatar/"</span><span class="token punctuation">;</span>    <span class="token comment">//将MultipartFile压缩保存</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">uploadAvatar</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> avatar<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获得上传文件的名称</span>        <span class="token class-name">String</span> rawFileName <span class="token operator">=</span> avatar<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//生成随机uuid，连接到原文件名前面，防止重名</span>        <span class="token class-name">String</span> uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> newFileName <span class="token operator">=</span> uuid<span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>rawFileName<span class="token punctuation">;</span>        <span class="token comment">//压缩图片，并保存在上述路径</span>        <span class="token class-name">Boolean</span> flag <span class="token operator">=</span> <span class="token function">zipAvatar</span><span class="token punctuation">(</span>avatar<span class="token punctuation">,</span>AVATAR_PATH<span class="token operator">+</span>newFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> AVATAR_LOAD_PATH<span class="token operator">+</span>newFileName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 压缩图片并保存在该目录下</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Boolean</span> <span class="token function">zipAvatar</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> img<span class="token punctuation">,</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//先压缩并保存图片</span>            <span class="token class-name">Thumbnails</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span>  <span class="token comment">//压缩尺寸 范围（0.00--1.00）</span>                    <span class="token punctuation">.</span><span class="token function">outputQuality</span><span class="token punctuation">(</span><span class="token number">0.4f</span><span class="token punctuation">)</span>  <span class="token comment">//压缩质量 范围（0.00--1.00）</span>                    <span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出路径</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的注释也说的很清楚了，我使用Thumbnails压缩了图片（这样能加速后续的“图片回传”功能，减轻服务器压力）</p><p>Thumbnails的依赖如下（放入pom.xml的dependencies标签中）：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--图片处理thumbnailator--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.coobird<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thumbnailator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.4.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="图片回传"><a href="#图片回传" class="headerlink" title="图片回传"></a>图片回传</h2><p>在保存图片的时候，我传回的是带有图片名的url，这个url将一路传到前端手里，然后由前端来请求加载这个图片。</p><p>那么如何让前端通过url就能访问头像文件呢？</p><p>我这里采用的是tomcat，广播出去静态资源（可恶的华为云，安全组默认关掉了所有端口。。）。</p><p>后面其实还是使用nginx做了转发，这样能不暴露进程的端口。</p><p>再后来，就是研究了半天域名和https（ssl证书）的问题，虽然域名解析和https都能用，但考虑到我的域名只有半年期限了，还是继续使用原始的服务器ip了。</p><h2 id="删除废弃的图片"><a href="#删除废弃的图片" class="headerlink" title="删除废弃的图片"></a>删除废弃的图片</h2><p>直接上代码（在ImgUtil类中）：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//通过url路径删除图片</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Boolean</span> <span class="token function">deleteImg</span><span class="token punctuation">(</span><span class="token class-name">String</span> imgLoadPath<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> filePath <span class="token operator">=</span> <span class="token string">"/project/misstrace/tomcat8port8080/webapps/"</span><span class="token operator">+</span>imgLoadPath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//根据路径创建文件对象</span>    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//路径是个文件且不为空时删除文件</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        flag <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//删除失败时，返回false</span>    <span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总体来说，这部分服务的实现过程还是很愉快的，一个从0到1的过程，”接口生效“的正向反馈让我有些上头。</p><p>然而在上手的时候，我还是意识到对异常处理的陌生。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 实训 </tag>
            
            <tag> 图片服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Minecraft安装optifine时无法正确打开jar文件</title>
      <link href="/2022/07/12/Minecraft%E5%AE%89%E8%A3%85optifine%E6%97%B6%E6%97%A0%E6%B3%95%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80jar%E6%96%87%E4%BB%B6/"/>
      <url>/2022/07/12/Minecraft%E5%AE%89%E8%A3%85optifine%E6%97%B6%E6%97%A0%E6%B3%95%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80jar%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>很多MC玩家应该遇到过这种情况：下载好了对应版本optifine（或forge等）包，但是就是打不开（双击后闪过了一个黑框，然后啥都没发生）。尝试过选择“打开方式”，但最后不论是用java.exe还是javaw.exe，都无法正确打开。</p><p>经历了一段时间的java学习，想分享一下这类问题的解决方法。（仅限windows操作系统）</p><h1 id="一、下载好对应版本的optifine"><a href="#一、下载好对应版本的optifine" class="headerlink" title="一、下载好对应版本的optifine"></a>一、下载好对应版本的optifine</h1><p>我一般会在<a href="https://optifine.cn/downloads">下载 OptiFine - OptiFine 中文网 - MINECRAFT 高清优化 MOD</a>上下载optifine。</p><h1 id="二、找到自己安装java的路径"><a href="#二、找到自己安装java的路径" class="headerlink" title="二、找到自己安装java的路径"></a>二、找到自己安装java的路径</h1><p>一般来说，MC玩家安装的java都只是“半个java”，即jre（java运行环境）。但这并不重要。</p><p>如果安装java时没有指定路径的话，默认路径就是<strong>C:\Program Files\Java\jre1.8.0_281</strong>。注意，其中的“jre1.8.0_281”需要按自己的实际目录来写。</p><img src="/2022/07/12/Minecraft%E5%AE%89%E8%A3%85optifine%E6%97%B6%E6%97%A0%E6%B3%95%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80jar%E6%96%87%E4%BB%B6/image-20220712181507352.png" class="" title="image-20220712181507352"><p>现在我们选中这个目录，把它复制下来</p><img src="/2022/07/12/Minecraft%E5%AE%89%E8%A3%85optifine%E6%97%B6%E6%97%A0%E6%B3%95%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80jar%E6%96%87%E4%BB%B6/image-20220712181516214.png" class="" title="image-20220712181516214"><h1 id="三、配置Java环境变量"><a href="#三、配置Java环境变量" class="headerlink" title="三、配置Java环境变量"></a>三、配置Java环境变量</h1><p>（这一步的目的是让计算机识别到我们安装了java，从而使得java指令能被计算机识别）</p><p>首先要打开高级系统设置。可以利用任务栏上的搜索框来搜索</p><img src="/2022/07/12/Minecraft%E5%AE%89%E8%A3%85optifine%E6%97%B6%E6%97%A0%E6%B3%95%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80jar%E6%96%87%E4%BB%B6/image-20220712181616640.png" class="" title="image-20220712181616640"><p>在弹出的对话框里选择“环境变量”</p><img src="/2022/07/12/Minecraft%E5%AE%89%E8%A3%85optifine%E6%97%B6%E6%97%A0%E6%B3%95%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80jar%E6%96%87%E4%BB%B6/image-20220712181839108.png" class="" title="image-20220712181839108"><p>然后在环境变量对话框中，点击下面的“新建”，变量名输入<strong>JAVA_HOME</strong>，变量值输入第一步中复制的那个java路径。</p><img src="/2022/07/12/Minecraft%E5%AE%89%E8%A3%85optifine%E6%97%B6%E6%97%A0%E6%B3%95%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80jar%E6%96%87%E4%BB%B6/image-20220712181639074.png" class="" title="image-20220712181639074"><p> 接下来，在系统变量里找到<strong>PATH</strong>，点击编辑，在弹出的对话框中，点击新建，并输入%JAVA_HOME%\bin。然后一路点击“确定”。</p><img src="/2022/07/12/Minecraft%E5%AE%89%E8%A3%85optifine%E6%97%B6%E6%97%A0%E6%B3%95%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80jar%E6%96%87%E4%BB%B6/image-20220712181651590.png" class="" title="image-20220712181651590"><p>至此，java环境变量配置完成。</p><h1 id="四、检验Java环境变量是否配置正确"><a href="#四、检验Java环境变量是否配置正确" class="headerlink" title="四、检验Java环境变量是否配置正确"></a>四、检验Java环境变量是否配置正确</h1><p>按win+R键，呼出运行“运行”对话框，输入cmd并确定</p><img src="/2022/07/12/Minecraft%E5%AE%89%E8%A3%85optifine%E6%97%B6%E6%97%A0%E6%B3%95%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80jar%E6%96%87%E4%BB%B6/image-20220712181658855.png" class="" title="image-20220712181658855"><p> 输入<strong>java -version</strong>后，如果弹出版本信息，说明配置正确</p><p>如果未弹出版本信息，而是说“不是内部或外部命令，也不是可运行的程序<br> 或批处理文件”，则说明环境变量配置有问题，请重新检查步骤三。</p><img src="/2022/07/12/Minecraft%E5%AE%89%E8%A3%85optifine%E6%97%B6%E6%97%A0%E6%B3%95%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80jar%E6%96%87%E4%BB%B6/image-20220712181710531.png" class="" title="image-20220712181710531"><h1 id="五、运行optifine-jar包"><a href="#五、运行optifine-jar包" class="headerlink" title="五、运行optifine.jar包"></a>五、运行optifine.jar包</h1><p>如过第四步也能顺利完成，那么恭喜你，你可以正确打开optifine安装包了！</p><p>首先我们找到存放步骤一中下载optifine的地方，然后按住shift，同时鼠标右键点击空白处，会发现有一个选项是“在windows终端打开”（win10可能显示为在“PowerShell中打开”）</p><img src="/2022/07/12/Minecraft%E5%AE%89%E8%A3%85optifine%E6%97%B6%E6%97%A0%E6%B3%95%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80jar%E6%96%87%E4%BB%B6/image-20220712181722875.png" class="" title="image-20220712181722875"><p>接着，在弹出的命令框中，输入<strong>java -jar</strong>。（注意-jar后面有一个空格）。此时不要按回车， 而是要按几次键盘上的Tab键，Tab键会帮助我们锁定文件。</p><img src="/2022/07/12/Minecraft%E5%AE%89%E8%A3%85optifine%E6%97%B6%E6%97%A0%E6%B3%95%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80jar%E6%96%87%E4%BB%B6/image-20220712181732243.png" class="" title="image-20220712181732243"><p> 当锁定到的文件正是我们下载的optifine时，就可以按回车键了。</p><p>此时，我们发现，optifine安装器正常打开了！</p><img src="/2022/07/12/Minecraft%E5%AE%89%E8%A3%85optifine%E6%97%B6%E6%97%A0%E6%B3%95%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80jar%E6%96%87%E4%BB%B6/image-20220712181746950.png" class="" title="image-20220712181746950"><p> 后面的安装操作，就可以参考网上的其他文章进行了。</p>]]></content>
      
      
      <categories>
          
          <category> Minecraft </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开始学习Java</title>
      <link href="/2022/07/04/%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0Java/"/>
      <url>/2022/07/04/%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0Java/</url>
      
        <content type="html"><![CDATA[<h1 id="不是已经学过Java了吗？"><a href="#不是已经学过Java了吗？" class="headerlink" title="不是已经学过Java了吗？"></a>不是已经学过Java了吗？</h1><p>Java是我接触的第一种编程语言。我对Java的学习，始于2021年暑假用命令行成功运行class脚本。大一上课程学习了JavaSE的前小半部分，但学的实在有些“轻量化”，且大一下的Java课程设计直接越过JavaWeb使用了SpringBoot框架。</p><p>总之，本次学习是为了<strong>补充JavaSE</strong>(数据结构、线程、反射)，<strong>学习JavaWeb和Spring</strong>、<strong>进行SpringBoot和SpringCloud的实践</strong></p><p>学习方式主要是跟随白马程序员的视频以及讲义。</p><p><strong>注：后文是对<a href="https://space.bilibili.com/37737161">青空の霞光</a>的笔记进行简化和修改</strong></p><hr><h1 id="Java语法规范"><a href="#Java语法规范" class="headerlink" title="Java语法规范"></a>Java语法规范</h1><p>所有的Java语句必须以<code>;</code>结尾！</p><p>无论是<code>()</code>、<code>[]</code>还是<code>&#123;&#125;</code>，所有的括号必须一一匹配！</p><p>主方法的代码只能写在<code>&#123;&#125;</code>中！</p><h1 id="Java基础语法（面向过程）"><a href="#Java基础语法（面向过程）" class="headerlink" title="Java基础语法（面向过程）"></a>Java基础语法（面向过程）</h1><h2 id="变量和关键字"><a href="#变量和关键字" class="headerlink" title="变量和关键字"></a>变量和关键字</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量就是一个可变的量：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>变量和C语言中的变量不同，Java中的变量是存放在JVM管理的内存中，C语言的变量存放在内存（某些情况下需要手动释放内存，而Java会自动帮助我们清理变量占据的内存）Java和C++很类似，但是没有指针！Java也叫C++–</p><p>Java是强类型语言，只有明确定义了变量之后，你才能使用！一旦被指定某个数据类型，那么它将始终被认为是对应的类型（和JS不一样！）</p><p>定义一个变量的格式如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>类型<span class="token punctuation">]</span> <span class="token punctuation">[</span>标识符<span class="token punctuation">(</span>名字<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>初始值<span class="token punctuation">(</span>可选<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注：标识符命名规范：</p><ul><li>标识符以由大小写字母、数字、下划线(_)和美元符号($)组成，但是不能以数字开头。</li><li>大小写敏感！</li><li>不能有空格、@、#、+、-、&#x2F; 等符号</li><li>应该使用有意义的名称，达到见名知意的目的，最好以小写字母开头</li><li>不可以是 true 和 false </li><li>不能与Java语言的关键字重名</li></ul><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><img src="/2022/07/04/%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0Java/image-20220704211536669.png" class="" title="image-20220704211536669"><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>常量就是无法修改值的变量，常量的值，只能定义一次：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">//报错！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>常量前面必须添加final关键字（C语言里面是const，虽然Java也有，但是不能使用！）</p><p>这只是final关键字的第一个用法，后面还会有更多的用法。</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>养成注释的好习惯，不然以后自己都看不懂自己的代码！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//我是单行注释</span><span class="token comment">/*** 我是* 多行注释*/</span><span class="token comment">//TODO 待做标记</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>Java中的数据类型分为<strong>基本数据类型</strong>和<strong>引用类型</strong>两类。</p><p>这一部分稍微有点烧脑，但是是重中之重，如果你掌握了这些，任何相关的面试题都难不倒你！（如果你学习过计算机组成原理就很好理解了）</p><h3 id="计算机中的二进制表示"><a href="#计算机中的二进制表示" class="headerlink" title="计算机中的二进制表示"></a>计算机中的二进制表示</h3><p>现在有4个bit位，最大能够表示多大的数字呢？</p><ul><li>最小：0000 &#x3D;&gt; 0</li><li>最大：1111 &#x3D;&gt; 2^3+2^2+2^1+2^0 &#x3D;&gt; 8 + 4 + 2 + 1 &#x3D; 15</li></ul><p>在Java中，无论是小数还是整数，他们都要带有符号（和C语言不同，C语言有无符号数）所以，首位就作为我们的符号位，还是以4个bit为例，首位现在作为符号位（1代表负数，0代表正数）：</p><ul><li>最小：1111 &#x3D;&gt; -(2^2+2^1+2^0) &#x3D;&gt; -7</li><li>最大：0111 &#x3D;&gt; +(2^2+2^1+2^0) &#x3D;&gt; +7 &#x3D;&gt; 7</li></ul><p>现在，我们4bit能够表示的范围变为了-7~+7，这样的表示方式称为原码。</p><h3 id="计算机中的加减法"><a href="#计算机中的加减法" class="headerlink" title="计算机中的加减法"></a>计算机中的加减法</h3><h4 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h4><p>虽然原码表示简单，但是原码在做加减法的时候，很麻烦，于是我们引入了反码：</p><h4 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h4><ul><li>正数的反码是其本身</li><li>负数的反码是在其原码的基础上, 符号位不变，其余各个位取反</li></ul><p>经过上面的定义，我们再来进行加减法：</p><p>1+(-1) &#x3D; 0001 + 1110 &#x3D; 1111 &#x3D;&gt; -0 </p><p>思考：1111代表-0，0000代表+0，在我们实数的范围内，0有正负之分吗？</p><ul><li>0既不是正数也不是负数，那么显然这样的表示依然不够合理！</li></ul><h4 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h4><p>根据上面的问题，我们引入了最终的解决方案，那就是补码，定义如下：</p><ul><li>正数的补码就是其本身 （不变！）</li><li>负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)</li></ul><p>再来看上面的运算：</p><p>1+(-1) &#x3D; 0001 + 1111 &#x3D; (1)0000 &#x3D;&gt; +0 （现在无论你怎么算，也不会有-0了！）</p><p>所以现在，4bit位能够表示的范围是：-8~+7（Java使用的就是补码！）</p><hr><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><p>在Java中，整数类型包括以下几个：</p><ul><li>byte 字节型 （8个bit，也就是1个字节）范围：-128~+127</li><li>short 短整形（16个bit，也就是2个字节）范围：-32768~+32767</li><li>int 整形（32个bit，也就是4个字节）最常用的类型</li><li>long 长整形（64个bit，也就是8个字节）最后需要添加l或L</li></ul><p>long都装不下怎么办？<strong>BigInteger</strong>！</p><p>数字已经达到byte的最大值了，还能加吗？为了便于理解，以4bit(-8~7)为例：</p><p>四比特下：7 + 1 &#x3D;&gt; 0111 + 0001 &#x3D; 1000 &#x3D;&gt;  -8（你没看错，就是这样！）</p><p>整数还能使用8进制、16进制表示：</p><ul><li>十进制为15 &#x3D; 八进制表示为017 &#x3D; 十六进制表示为 0xF &#x3D; 二进制表示 1111 (代码里面不能使用二进制！)</li></ul><h3 id="字符类型和字符串"><a href="#字符类型和字符串" class="headerlink" title="字符类型和字符串"></a>字符类型和字符串</h3><p>在Java中，存在字符类型，它能够代表一个字符：</p><ul><li>char 字符型（16个bit，也就是2字节，它不带符号！）范围是0 ~ 65535</li><li>使用Unicode表示就是：\u0000 ~ \uffff</li></ul><p>字符要用单引号扩起来！比如 char c &#x3D; ‘淦’;</p><p>字符其实本质也是数字，但是这些数字通过编码表进行映射，代表了不同的字符，比如字符<code>&#39;A&#39;</code>的ASCII码就是数字<code>65</code>，所以，char类型其实可以转换为上面的整数类型。</p><p>Java的char采用Unicode编码表（不是ASCII编码！），Unicode编码表包含ASCII的所有内容，同时还包括了全世界的语言，ASCII只有1字节，而Unicode编码是2字节，能够代表65536种文字，足以包含全世界的文字了！（我们编译出来的字节码文件也是使用Unicode编码的，所以利用这种特性，其实Java支持中文变量名称、方法名称甚至是类名）</p><p>既然char只能代表一个字符，那怎么才能包含一句话呢？（关于数组，我们这里先不了解，数组我们放在面向对象章节讲解）</p><p>String就是Java中的字符串类型（注意，它是一个类，创建出来的字符串本质是一个对象，不是我们的基本类型）字符串就像它的名字一样，代表一串字符，也就是一句完整的话。</p><p>字符串用双引号括起来！比如：String str &#x3D; “一日三餐没烦恼”;</p><h3 id="小数类型"><a href="#小数类型" class="headerlink" title="小数类型"></a>小数类型</h3><p>小数类型比较难理解（比较难理解指的是原理，不是使用）首先来看看Java中的小数类型包含哪些：</p><ul><li>float 单精度浮点型 （32bit，4字节）</li><li>double 双精度浮点型（64bit，8字节）</li></ul><p>思考：小数的范围该怎么定义呢？我们首先要了解的是小数在计算机里面是如何存放的：</p><p>![image-20210817143234500](..&#x2F;..&#x2F;..&#x2F;Users&#x2F;nagocoler&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210817143234500.png)</p><p>根据国际标准 IEEE 754，任意一个二进制浮点数 V 可以表示成下面的形式：<br>V &#x3D; (-1)^S × M × 2^E<br>（1）(-1)^S 表示符号位，当 S&#x3D;0，V 为正数；当 S&#x3D;1，V 为负数。<br>（2）M 表示有效数字，大于等于 1，小于 2，但整数部分的 1 不变，因此可以省略。（例如尾数为1111010，那么M实际上就是1.111010，尾数首位必须是1，1后面紧跟小数点，如果出现0001111这样的情况，去掉前面的0，移动1到首位；题外话：随着时间的发展，IEEE 754标准默认第一位为1，故为了能够存放更多数据，就舍去了第一位，比如保存1.0101 的时候， 只保存 0101，这样能够多存储一位数据）<br>（3）2^E 表示指数位。（用于移动小数点）</p><p>比如： 对于十进制的 5.25 对应的二进制为：101.01，相当于：1.0101*2^2。所以，S 为 0，M 为 1.0101，E 为 2。所以，对于浮点类型，最大值和最小值不仅取决于符号和尾数，还有它的阶码。我们在这里就不去计算了，想了解的可以去搜索相关资料。</p><p>思考：就算double有64bit位数，但是依然存在精度限制，如果我要进行高精度的计算，怎么办？BigDecimal！</p><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p>布尔类型（boolean）只有<code>true</code>和<code>false</code>两种值，也就是要么为真，要么为假，布尔类型的变量通常用作流程控制判断语句。（C语言一般使用0表示false，除0以外的所有数都表示true）布尔类型占据的空间大小并未明确定义，而是根据不同的JVM会有不同的实现。</p><hr><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><p>隐式类型转换支持字节数小的类型自动转换为字节数大的类型，整数类型自动转换为小数类型，转换规则如下：</p><ul><li>byte→short(char)→int→long→float→double</li></ul><p>问题：为什么long比float大，还能转换为float呢？小数的存储规则让float的最大值比long还大，只是可能会丢失某些位上的精度！</p><p>所以，如下的代码就能够正常运行：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token keyword">short</span> s <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token keyword">long</span> l <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">float</span> f <span class="token operator">=</span> l<span class="token punctuation">;</span><span class="token keyword">double</span> d <span class="token operator">=</span> f<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 9.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="显示类型转换"><a href="#显示类型转换" class="headerlink" title="显示类型转换"></a>显示类型转换</h3><p>显示类型转换也叫做强制类型转换，也就是说，违反隐式转换的规则，牺牲精度强行进行类型转换。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 -128</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么结果是-128？精度丢失了！</p><ul><li>int 类型的128表示：00000000 00000000 00000000 10000000</li><li>byte类型转换后表示：xxxxxxxx xxxxxxxx xxxxxxxx 10000000 &#x3D;&gt; -128</li></ul><h3 id="数据类型自动提升"><a href="#数据类型自动提升" class="headerlink" title="数据类型自动提升"></a>数据类型自动提升</h3><p>在参与运算时（也可以位于表达式中时，自增自减除外），所有的byte型、short型和char的值将被提升到int型：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">105</span><span class="token punctuation">;</span>b <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">//报错！</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个特性是由 <strong>Java虚拟机规范</strong> 定义的，也是为了提高运行的效率。其他的特性还有：</p><ul><li>如果一个操作数是long型，计算结果就是long型</li><li>如果一个操作数是float型，计算结果就是float型</li><li>如果一个操作数是double型，计算结果就是double型</li></ul><hr><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="赋值和算术运算符"><a href="#赋值和算术运算符" class="headerlink" title="赋值和算术运算符"></a>赋值和算术运算符</h3><p>赋值运算符<code>=</code>是最常用的运算符，其实就是将我们等号右边的结果，传递给等号左边的变量，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>算术运算符也就是我们在小学阶段学习的<code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>%</code>，分别代表加减乘除还有取余，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span><span class="token comment">//结果为6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，<code>+</code>还可以用作字符串连接符使用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lbw"</span> <span class="token operator">+</span> <span class="token string">"nb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//lbwnb</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然，字符串可以直接连接其他类型，但是会全部当做字符串处理：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lbw"</span> <span class="token operator">+</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//lbw715</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>算术运算符还包括<code>++</code>和<code>--</code>也就是自增和自减，以自增为例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出为11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>自增自减运算符放在变量的前后的返回值是有区别的：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//10 （先返回值，再自增）</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">++</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//11 （先自增，再返回值）</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token operator">++</span><span class="token operator">+</span>a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//猜猜看结果是多少</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>为了使得代码更简洁，你还可以使用扩展的赋值运算符，包括<code>+=</code>、<code>-=</code>、<code>/=</code>、<code>*=</code>、<code>%=</code>，和自增自减类似，先执行运算，再返回结果，同时自身改变：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//等价于 a = a + 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>关系运算符的结果只能是布尔类型，也就是要么为真要么为假，关系运算符包括：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">></span> <span class="token operator">&lt;</span> <span class="token operator">==</span> <span class="token comment">//大于小于等于</span><span class="token operator">>=</span> <span class="token operator">&lt;=</span>  <span class="token operator">!=</span>  <span class="token comment">//大于等于，小于等于，不等于</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>关系运算符一般只用于基本类型的比较，运算结果只能是boolean：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> x <span class="token operator">=</span> a <span class="token operator">></span> b<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果为 true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>逻辑运算符两边只能是boolean类型或是关系&#x2F;逻辑运算表达式，返回值只能是boolean类型！逻辑运算符包括：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&amp;&amp;</span> <span class="token comment">//与运算，要求两边同时为true才能返回true</span><span class="token operator">||</span> <span class="token comment">//或运算，要求两边至少要有一个为true才能返回true</span><span class="token operator">!</span> <span class="token comment">//非运算，一般放在表达式最前面，表达式用括号扩起来，表示对表达式的结果进行反转</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实际案例来看看：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> x <span class="token operator">=</span> a <span class="token operator">></span> b <span class="token operator">&amp;&amp;</span> a <span class="token operator">&lt;</span> b<span class="token punctuation">;</span>  <span class="token comment">//怎么可能同时满足呢</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> x <span class="token operator">=</span> a <span class="token operator">></span> b <span class="token operator">||</span> a <span class="token operator">&lt;=</span> b<span class="token punctuation">;</span>  <span class="token comment">//一定有一个满足！</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> x <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//对结果进行反转，本来应该是true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&amp;</span> <span class="token comment">//按位与，注意，返回的是运算后的同类型值，不是boolean！</span><span class="token operator">|</span> <span class="token comment">//按位或</span><span class="token operator">^</span> <span class="token comment">//按位异或 0 ^ 0 = 0</span><span class="token operator">~</span> <span class="token comment">//按位非</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>按位运算实际上是根据值的二进制编码来计算结果，例如按位与，以4bit为例：</p><p>0101 &amp; 0100 &#x3D; 0100 （只有同时为1对应位才得1）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果为7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h3><p>三目运算符其实是为了简化代码而生，可以根据条件是否满足来决定返回值，格式如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token class-name">String</span> str <span class="token operator">=</span> a <span class="token operator">></span> b <span class="token operator">?</span> <span class="token string">"行"</span> <span class="token operator">:</span> <span class="token string">"不行"</span><span class="token punctuation">;</span>  <span class="token comment">// 判断条件(只能是boolean,或返回boolean的表达式) ? 满足的返回值 : 不满足的返回值 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"汉堡做的行不行？"</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//汉堡做的行不行？不行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>理解三目运算符，就很容易理解后面的if-else语句了。</p><hr><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>我们的程序都是从上往下依次运行的，但是，仅仅是这样还不够，我们需要更加高级的控制语句来帮我进行更灵活的控制。比如，判断用户输入的数字，大于1则输出ok，小于1则输出no，这时我们就需要用到选择结构来帮助我们完成条件的判断和程序的分支走向。学习过C语言就很轻松！</p><h3 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h3><p>选择结构包含if和switch类型，选择结构能够帮助我们根据条件判断，再执行哪一块代码。</p><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><p>就像上面所说，判断用户输入的数字，大于1则输出ok，小于1则输出no，要实现这种效果，我们首先可以采用if语句：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>判断条件<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//判断成功执行的内容</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>  <span class="token comment">//判断失败执行的内容</span><span class="token punctuation">&#125;</span><span class="token comment">//if的内容执行完成后，后面的内容正常执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>else</code>语句不是必须的。</p><p>现在，又来了一个新的需求，用户输入的是1打印ok，输入2，打印yes，其他打印no，那么这样就需要我们进行多种条件的判断了，当然if能进行多分支判断：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>判断条件<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//判断成功执行的内容</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>判断条件<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//再次判断，如果判断成功执行的内容</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>  <span class="token comment">//上面的都没成功，只能走这里</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样，<code>else</code>语句不是必须的。</p><p>现在，又来了一个新的需求，用户输入1之后，在判断用户下一次输入的是什么，如果是1，打印yes，不是就打印no，这样就可以用嵌套if了：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>判断条件<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//前提是判断条件1要成功才能进来！</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>判断条件<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//判断成功执行的内容</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token comment">//判断失败执行的内容</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h4><p>我们不难发现，虽然<code>else-if</code>能解决多分支判断的问题，但是效率实在是太低了，多分支if采用的是逐级向下判断，显然费时费力，那么有没有一直更专业的解决多分支判断问题的东西呢？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>判断主体<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> 值<span class="token number">1</span><span class="token operator">:</span>    <span class="token comment">//运行xxx</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment">//break用于跳出switch语句，不添加会导致程序继续向下运行！</span>  <span class="token keyword">case</span> 值<span class="token number">2</span><span class="token operator">:</span>    <span class="token comment">//运行xxx</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> 值<span class="token number">3</span><span class="token operator">:</span>    <span class="token comment">//运行xxx</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述语句中，只有判断主体等于case后面的值时，才会执行case中的语句，同时需要使用break来跳出switch语句，否则会继续向下运行！</p><p>为什么switch效率更高呢，因为switch采用二分思想进行查找（这也是为什么switch只能判断值相等的原因），能够更快地找到我们想要的结果！</p><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><p>小明想向小红表白，于是他在屏幕上打印了520个 “我爱你”，我们用Java该如何实现呢？</p><h4 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h4><p>for语句是比较灵活的循环控制语句，一个for语句的定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>初始条件<span class="token punctuation">;</span>循环条件<span class="token punctuation">;</span>更新<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//循环执行的内容</span><span class="token punctuation">&#125;</span><span class="token comment">//循环结束后，继续执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>初始条件：循环开始时的条件，一般用于定义控制循环的变量。</li><li>循环条件：每轮循环开始之前，进行一次判断，如果满足则继续，不满足则结束，要求为boolean变量或是boolean表达式。</li><li>更新：每轮循环结束后都会执行的内容，一般写增量表达式。</li></ul><p>初始条件、循环条件、更新条件不是缺一不可，甚至可以都缺！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">520</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我爱你"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//这里的内容将会永远地进行下去！</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>增强for循环在数组时再讲解！</p><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>while循环和for循环类似，但是它更加的简单，只需要添加维持循环的判断条件即可！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>循环条件<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//循环执行的内容</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>和for一样，每次循环开始，当循环条件不满足时，自动退出！那么有时候我们希望先执行了我们的代码再去判断怎么办呢，我们可以使用do-while语句：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">do</span><span class="token punctuation">&#123;</span>  <span class="token comment">//执行内容</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>循环条件<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一定会先执行do里面的内容，再做判断！</p><p>思考：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token comment">//它们的性能谁更高？</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="面向过程编程实战（基础-算法）"><a href="#面向过程编程实战（基础-算法）" class="headerlink" title="面向过程编程实战（基础+算法）"></a>面向过程编程实战（基础+算法）</h2><h3 id="打印九九乘法表"><a href="#打印九九乘法表" class="headerlink" title="打印九九乘法表"></a>打印九九乘法表</h3><p>简单：将九九乘法表打印到控制台。</p><h3 id="求1000以内的水仙花数"><a href="#求1000以内的水仙花数" class="headerlink" title="求1000以内的水仙花数"></a>求1000以内的水仙花数</h3><p>中等：打印1000以内所有满足水仙花的数，“水仙花数”是指一个三位数其各位数字的立方和等于该数本身，例如153是“水仙花数”，因为：153 &#x3D; 1^3 + 5^3 + 3^3</p><h3 id="青蛙跳台阶问题"><a href="#青蛙跳台阶问题" class="headerlink" title="青蛙跳台阶问题"></a>青蛙跳台阶问题</h3><p>困难：一共有n个台阶，一只青蛙每次只能跳一阶或是两阶，那么一共有多少种跳到顶端的方案？例如n&#x3D;2，那么一共有两种方案，一次性跳两阶或是每次跳一阶。</p><p>动态规划：其实，就是利用，上次得到的结果，给下一次作参考，下一次就能利用上次的结果快速得到结果，依次类推</p><p>笔记原文作者：<a href="https://space.bilibili.com/37737161">青空の霞光</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个脚本——百度翻译爬虫</title>
      <link href="/2022/06/29/%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%84%9A%E6%9C%AC%E2%80%94%E2%80%94%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91%E7%88%AC%E8%99%AB/"/>
      <url>/2022/06/29/%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%84%9A%E6%9C%AC%E2%80%94%E2%80%94%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<p>记录第一次制作脚本</p><p>本文记录制作一个调用百度翻译实现翻译功能的小脚本</p><p>主要有三个步骤：【找接口】&#x3D;&gt;【研究关键字】&#x3D;&gt;【写脚本】</p><h2 id="找到翻译请求接口"><a href="#找到翻译请求接口" class="headerlink" title="找到翻译请求接口"></a>找到翻译请求接口</h2><p>这一步没有难度，在百度翻译页面打开开发者工具，然后输入<code>哈哈</code>，然后在network里找接口就可以。</p><p>如果请求太多的话，可以用<code>Fetch/XHR</code>按钮过滤一下：</p><img src="/2022/06/29/%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%84%9A%E6%9C%AC%E2%80%94%E2%80%94%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91%E7%88%AC%E8%99%AB/image-20220630004106276.png" class="" title="image-20220630004106276"><p>可以看到，这是一个POST请求</p><h2 id="分析请求关键字"><a href="#分析请求关键字" class="headerlink" title="分析请求关键字"></a>分析请求关键字</h2><ol><li><p>从上面看到，关键字有<strong>from</strong>、<strong>to</strong>、<strong>query</strong>、<strong>transtype</strong>、<strong>simple_means_flag</strong>、<strong>sign</strong>、<strong>token</strong>、<strong>domain</strong>。</p><p>分析之后，得出：<strong>from</strong>、<strong>to</strong>代表<strong>输入语言</strong>、<strong>输出语言</strong>；<strong>query</strong>为<strong>输入文字</strong>；<strong>transtype</strong>为<strong>翻译类型</strong>(自动翻译、点击后翻译等，这个关键字并不重要)；<strong>domain</strong>为常值”common”。而<strong>sign</strong>和<strong>token</strong>为一串<em><strong>奇怪的数字</strong></em></p></li><li><p>from、to指定语言类型，后面发现，from是可以自动检测或者手动指定的。如果希望自动检测，那就需要在请求翻译接口前请求一次langdetect，并匹配出语言类型。<img src="/2022/06/29/%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%84%9A%E6%9C%AC%E2%80%94%E2%80%94%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91%E7%88%AC%E8%99%AB/image-20220630005521930.png" class="" title="image-20220630005521930"></p></li><li><p>query由用户输入；transtype和simple_means_flag完全可以写死。</p></li><li><p>至于token,全局搜索一下那串字符，发现它是请求fanyi.baidu.com时获取到的</p><img src="/2022/06/29/%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%84%9A%E6%9C%AC%E2%80%94%E2%80%94%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91%E7%88%AC%E8%99%AB/image-20220630010149574.png" class="" title="image-20220630010149574"><p>截止到目前，我需要关心的字段有：</p><ul><li>from：通过langdetect请求获取</li><li>query：由用户输入</li><li>token：请求fanyi.baidu.com获取</li><li>sign：一个神秘字段</li></ul></li><li><p>现在来研究这个sign：</p><ul><li><p>像token一样进行全局搜索，没有结果</p><img src="/2022/06/29/%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%84%9A%E6%9C%AC%E2%80%94%E2%80%94%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91%E7%88%AC%E8%99%AB/image-20220630010637908.png" class="" title="image-20220630010637908"></li><li><p>从v2transapi请求的调用栈中寻找线索</p><img src="/2022/06/29/%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%84%9A%E6%9C%AC%E2%80%94%E2%80%94%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91%E7%88%AC%E8%99%AB/image-20220630010808634.png" class="" title="image-20220630010808634"><p>一层层地观察call stack，在e.onTranslate附近发现可疑之处</p><img src="/2022/06/29/%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%84%9A%E6%9C%AC%E2%80%94%E2%80%94%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91%E7%88%AC%E8%99%AB/image-20220630011052897.png" class="" title="image-20220630011052897"><p>经过打断点调试，发现这里的n就是我输入的<code>哈哈</code>二字，所以，我只需要找到这个x()函数，就能得到<strong>sign</strong>的值！！！</p><img src="/2022/06/29/%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%84%9A%E6%9C%AC%E2%80%94%E2%80%94%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91%E7%88%AC%E8%99%AB/image-20220630014421971.png" class="" title="image-20220630014421971"></li><li><p>在控制台里输入<code>x</code>并回车，弹出了我想要的函数。但在复制得到的函数并不能直接运行，因为函数中往往存在一些全局变量或调用了其他函数，这时，需要耐心地把它们补全。经历了一个window.gtk、一个n函数，我终于得到了sign值：</p><img src="/2022/06/29/%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%84%9A%E6%9C%AC%E2%80%94%E2%80%94%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91%E7%88%AC%E8%99%AB/image-20220630011935505.png" class="" title="image-20220630011935505"></li><li><p>至此，关键字全部复现。</p></li></ul></li></ol><h2 id="写-抄-脚本"><a href="#写-抄-脚本" class="headerlink" title="写(抄)脚本"></a>写(抄)脚本</h2><p>脚本用python编写，写的过程中要注意请求头携带cookie。</p><p>另外，我在初次使用PyCharm时，遇到了两个问题：</p><ul><li><p>运行不了js脚本：其实，通过命令行是可以直接node xxx.js的；但最后找到了标准方法——下载nodejs插件。。。</p></li><li><p>py文件中import报错：我明明已经安装过这些库了，怎么说我没有呢？原来新建项目的时候，PyCharm给我在项目目录下放了一个精简的python编译器，而我所安装的库，都在我的AppData那里。。。于是有两种解决思路：一是在项目目录下安装那些库，二是直接使用我自己的解释器。</p></li></ul><p>附：<a href="https://github.com/kgepachong/crawler/tree/main/fanyi_baidu_com">git hub上的百度翻译小爬虫</a></p>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
